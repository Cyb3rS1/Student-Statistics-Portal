Student Statistics Portal
Name: Sierra Smith  
Date Created: 11/20/2024

Program Description: 
This program is a small example of how numpy can perform batch calculations on extensive data sets.
Data from "grades.csv" is stored in a numpy array. Using numpy methods on the array and smaller slices give
us insight on how well our students performed on each exam and across all exams.

Functions used in the Program (list in order as they are called):

1. Function Name: main
     Description: First function to iterate in the program.
     Parameters: None  
     Variables: None
     Logical Steps: 
	1. Calls the open_file function.
     Returns: None

2. Function Name: open_file 
     Description: Opens, reads, and saves the contents of "grades.csv" to a numpy array. 
     Parameters: None
     Variables:
	1. contents(string) - All contents from "grades.csv"
	2. grades_list(list) - "contents" split into a list.
	3. a(ndarray) - Numpy array of "grades_list"
     Logical Steps: 
	1. Open the "grades.csv" file for reading.
	2. Save all contents on "grades.csv" to "contents".
	3. Split the contents by delimeters and save the resulting list to "grades_list"
	4. Use list comprehension to split the list into nested lists so that each nested list holds information 	for one student.
	5. Convert the list to a numpy array.
     Returns: None

3. Function Name: exam_stats_calculator
     Description: Calculates statistics such as mean, median, standard deviation, minimum, and maximum of 	all_grades for each exam and across all exams.
     Parameters: 
	1. a(ndarray) - Numpy array of "grades_list"
     Variables:
	1. exam_headers(ndarray) - Slice of numpy array (a) that holds exam headers ("Exam 1", "Exam 2", "Exam 3").
	2. all_grades(ndarray) - Slice of numpy array (a) that holds all exam grades.
	3. calculation_headers(list) - List of all calculations that will be performed on the grades.
	4. column_counter(integer) - Accumulator that iterates through a column for each exam.
	5. sublist_counter(integer) - Accumulator that serves as an index for referencing a nested list.
	6. item_counter(integer) - Accumulator that serves as an index for referencing an item in a list.
	7. nums_sublist(list) - Holding place for formatting items and slicing, the slices get appended to 	exam_nums.
	8. total_passed(integer) - Accumulator for totalling up all students who passed.
	9. total_grades(integer) - Accumulator for totalling up all exam grades regardless of passing or failing
	10. exam_grades(list) - Slice of a column from "all_grades" that represents grades from one exam.
	11. how_many_passed(integer) - Accumulating total of how many students passed one exam.
	12. how_many_failed(integer) - Accumulating total of how many students failed one exam.
	13. mean(float64) - Average grade for one exam, later reassigned to average grade for all exams.
	14. median(float64) - Median grade for one exam, later reassigned to median grade for all exams.
	15. std(float64) - Standard deviation of one exam, later reassigned to standard deviation of all exams.
	16. min_(int64) - Lowest grade for one exam, later reassigned to lowest grade for all exams.
	17. max_(int64) - Highest grade for one exam, later reassigned to highest grade for all exams.
	18. exam_nums(list) - All freshly calculated numbers from one exam are appended here.
	19. formt(string) - Format string used to format pass_percentage.
	20. pass_percentage(string) - A string representing the passing percentage of the class across all exams.
	21. overall_stats(list) - Where the overall class statistics are held.

     Logical Steps:
	1. Define exam_headers as a slice from "a".
	2. Define all_grades as a slice from "a".
	3. Convert all items in all_grades to integers.
	4. Define calculation_headers by adding strings naming each calculation we are performing. For example, 	"Average Grade", "Median Grade", "Standard Deviation", "Lowest Grade", "Highest Grade".
	5. Define column_counter as 0.
	6. Define sublist_counter as 0.
	7. Define item_counter as 0.
	8. Define nums_sublist as an empty list.
	9. Define total_passed as 0.
	10. Define total_grades as 0.
	11. Write a "while" loop with a condition of the column_counter being less than the length of the first row 	of "all_grades".
		12. Define exam_grades as the current column of all_grades indicated by the column_counter.
		13. Define how_many_passed as 0.
		14. Define how_many_failed as 0.
		15. Write a "for" loop inside the "while" loop that examines each grade in the current column of 			all_grades.
			- If "grade" is greater than or equal to 60, 1 is added to how_many_passed.
			- If "grade" is less than 60, 1 is added to how_many_failed.
		16. The average, median, standard deviation, maximum, and minimum values are calculated for the 		current column and appended to nums_sublist.
		17. By using list comprehension, every item in nums_sublist is converted to an integer.
		18. nums_sublist is split into nested lists and assigned to exam_nums by using list comprehension.
		19. Using the exam_headers list and column_counter as its index, the exam_headers list is iterated 		through showing which exam we are seeing statistics for. For example: exam_headers[column_counter].
 		20. Define "if-else" statements that alter a string to be plural or singular based on how many 			students passed and failed. For example: "1 student passed!" "2 students passed!"
		21. Add how_many_passed to total_passed.
		22. Assign total_grades as the sum of how_many_passed and how_many_failed.
		23. Write a "for" loop inside the "while" loop (Step 11) that iterates one time for each header in 		calculation_headers.
			- For each iteration, print the header and the item found in exam_nums using 					sublist_counter and item_counter. For example: exam_nums[sublist_counter][item_counter].
			- Add 1 to item_counter.
			26. Define an "if" loop inside the "for" loop (Step 23) with the condition of 					item_counter equaling the length of calculation_headers. 
				- Reset item_counter to 0.
		27. Add 1 to column_counter to select the next column where grades for the next exam are held.
		28. Add 1 to the sublist_counter to select the next nested list for the next exam.
	29. After the "while" loop exits, define a string that will be used to format the pass_percentage.
	30. Divide total_passed by total_grades and multiply it by 100 to get the pass percentage of the 	class. Format this result with the string defined in step 29 and assign it to pass_percentage.
	31. Use the numpy methods .mean, .median, .std, .min, and .max on all_grades and assign each result to the 	previously used variables (mean, median, std, min_, max_).
	32. Define a list called overall_stats that include the mean, median, std, min_, and max_ variables.
	33. Use list comprehension to convert every item in overall_stats to integers.
	34. Print the overall statistics starting with pass_percentage.
	35. Reset item_counter to 0.
	36. Define a "for" loop that iterates one time for each header in calculation_headers.
		- For each iteration, print the header and the corresponding item found in overall_stats using 			item_counter. For example: overall_stats[item_counter].
		- Add 1 to item_counter. 
     Returns: None


Logical Steps:
	1. Call the main() function.
	2. Call the open_file() function within the main() function.
	3. Call the exam_stats_calculator() function within the open_file() function. 

Link to your repository: https://github.com/Cyb3rS1/Student-Statistics-Portal